# This script is used to generate the folder-root index.ts files
# used to reduce the number of imports line in TypeScript files
# For the moment, it only match named exports because I don't use default exports

import sys
import glob
import re


if __name__ == '__main__':
    if len(sys.argv) != 2:
        raise Exception('You must specify a folder to scan')

    folder = sys.argv[1]
    files: list[str] = glob.glob(f'{folder}/**/*.ts*', recursive=True)
    files = list(filter(lambda d: not d.endswith('index.ts'), files))

    # Keys are the filename and values are lists of exports in the file
    # struct {[key: string]: (string, string)} Where the first string is the type of the match (type or const) and the second one is the name
    exports: dict[str, list[tuple[str, str]]] = {}

    for f in files:
        with open(f, 'r') as fo:
            matches = re.findall(r'(?:export\s(type|const|function|let|var))\s([^=\s|\(]*)\s?(?:=|\()', ''.join(fo.readlines()))

            exports[f] = matches

    output = ['/* This file has been generated by the generate-index.py script. Do not edit it will be wiped next time */\n', '\n']

    for key, val in exports.items():
        output.append('export { ' + ', '.join(map(lambda d: ' '.join(d) if d[0] == 'type' else d[1], val)) + ' } from \'' + key.replace(folder, '.').replace('.tsx', '') + '\';\n')

    with open(folder + '/index.ts', 'w') as f:
        f.writelines(output)
